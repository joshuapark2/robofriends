{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_containers_App"],"mappings":"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","file":"static/js/main.66c63469.chunk.js","sourcesContent":["import React from 'react'; //building function\r\n// ^ needed because we are writing jsx\r\n// Below we added the parameter of property or props\r\nconst Card = ({ name, email, id }) => {\r\n    return ( // make sure to return one element at a time (div element)\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name /*curly brackets important because js syntax */}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n/*\r\nCore Concepts of components:\r\nOrdering of Atoms -> Molecules -> Organisms -> Templates -> Pages\r\n\r\n*/","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// This CardList.js is an example of a pure function - Receives an input and returns same output - deterministic\r\n// Reads the props received which is ({ robots }) and renders out return statement\r\n// Components are called pure components, they don't need to know anything other than receive and return\r\n// It's nice because we will always know our inputs and outputs\r\n// ^^ Entire concept of props - main idea that they never change\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => { /* map instead of for.while loop */\r\n                    return (\r\n                            <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n// Usage of destructuring in ({...}} - allows us to grab the props object and grab its properties.\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        //className pa2 using tachyons\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        // javascript expression: {}, within bracket we are returning an object {{}} containing css styles\r\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n\r\n/*\r\nIn App.js, scroll is not a self-closing component, it wraps components.\r\nHow do we render what is inside solution?\r\n\r\nSo far the concepts of props and state were learned, last concept is children which is\r\n    <CardList robots={filteredRobots} \r\n\r\nEvery props object has children and the block of code written regarding <Scroll> </Scroll> uses the concept that\r\ncomponents can wrap other components within them using props.children\r\n\r\n*/","import React, { Component } from 'react';\r\n\r\n// Very useful for code in production rather than in developer mode which we are currently working on localhost.\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    // similar to try catch block in java\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Error has occurred</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport './App.css';\r\n// Overarching concept of One way Data Flow -> Dirty vs Re-Rendered (App is parent which robots and SearchBox classes)\r\n\r\n/*Concept of STATE vs props in react:\r\nDescription of your app -> STATE is just an object that describes your application\r\nSTATE is able to change the value of searchbox (input) and change what robots are displayed\r\n - Because App.js has states, its considered a smart component rather than a pure function such as SearchBox\r\n - Piece of data that describe our app.\r\nProps = simply things that comes out of state\r\nParent feed state to child component and once received, its a property that never changes.\r\n\r\nRule of Thumb that comes from react such as constructor and render -\r\nwhen making your own method in a component, this arrow functions\r\nExample: onSearchChange(event) changes to onSearchChange= (event) => {}\r\n*/\r\n\r\n// Syntax below for declaring a class - Class syntax is what makes a smart component\r\nclass App extends Component{\r\n    // How we add state - declare the state inside a constructor\r\n    constructor() {\r\n        // super calls the constructor of component\r\n        super()\r\n        // state is something that can change and effect our app which lives in the parent component\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n        }\r\n    }\r\n\r\n    // this is part of react which is why we don't use arrow functions like onSearchChange\r\n    // Using .json to dynamically code instead of static\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json()) // fetch the name and email first\r\n            .then(users => this.setState({ robots: users})); // this part is responsible to receiving the robots\r\n    }\r\n\r\n    // function we are creating - every time SearchBox input changes, it will trigger onSearchChange\r\n    onSearchChange = (event) => {\r\n        // syntax whenever we want to change state such as above: searchfield: ''\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    // Must nest a render() inside a return statement\r\n    render() {\r\n        // usage of destructuring\r\n        const { robots, searchfield } = this.state;\r\n\r\n        // with an event we always have .target.value\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n            // \"this.state.\" is important because searchfield is a object which contains a state\r\n        })\r\n\r\n        // Remember 'this.state.' portion or else we get 'robots' is not defined no-undef error\r\n        // scroll component - can be used anywhere in our app due to power of react.\r\n\r\n        return !robots.length ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange = {this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n/*\r\nExplanation of code\r\n\r\nWe have app component which has states of robots and searchfield\r\nsince app owns these two states, any component that has state uses the class syntax which allows\r\nthe usage of the constructor function to create this.state which is what changes in an app/describes an app.\r\n\r\nThe virtual DOM is just a javascript object that collects states and react uses those states to render and pass them\r\ndown as props to components in the return statement. The components that are just functions can just render.\r\n\r\nApp will always look the same due to our program structuring of pure functions (one job/task with one input/output)\r\nState is managed in the render function. App is only thing that can change states.\r\nHowever, props can be passed down into the render function such as onSearchChange to the SearchBox.\r\nThen the SearchBox - every time there's an onSearchChange on the input, it lets the app know that a change was made\r\nand to run the onSearchChange function with the event and update the search field in the constructor from an\r\nempty string '' to whatever the given input was. \r\n\r\nFrom here, we can communicate with the CardList and tell it to filter the this.state.robots to only 'includes'\r\nwhatever is in the searchfield. Then instead of passing this.state.robots, we pass the filteredRobots.\r\n\r\nNote that robot never changes, but we created a new array called filteredRobots and we always pass that down.\r\n\r\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; // view library - core of the package that does DOM manipulation for us.\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}